/* 
 * [ElectricCarAlpha.java]
 * Electric car with extension 1
 * Author: Josh Cai
 * Nov. 6 2017
*/

import java.util.*;
import java.io.*;

public class ElectricCarAlpha{
  
  public static void main(String args[])throws Exception{
    String fileName = "city.txt";
    
    System.out.println(findDistance(fileName));
    
  }
  
  public static int findDistance (String fileName)throws Exception{
    File file = new File (fileName);
    Scanner read = new Scanner (file);
    
    int rowSize = read.nextInt();
    int colSize = read.nextInt();
    char[][] map = new char[rowSize][colSize];
    int fuel = read.nextInt();
    read.nextLine();
    String temp = "";
    
    for(int row = 0; row < rowSize; row++){
      temp = read.nextLine();
      map[row] = temp.toCharArray();
    }
    
    
    read.close();
    return  fuel - solve(map, 1, 1);
  }
  
  public static int solve (char[][] map, int row, int col) throws Exception{
    
    File temp = new File("temp.txt");
    PrintWriter pw = new PrintWriter (temp);
    
    
    int free = 0;
    
    //check number of empty spaces
    if (map[row+1][col] == ' '){
      free++;
    }
    if (map[row-1][col] == ' '){
      free++;
    }
    if (map[row][col+1] == ' '){
      free++;
    }
    if (map[row][col-1] == ' '){
      free++;
    }
    
    //if destination
    if (map[row][col+1] == 'D'){
      map[row][col] = '*';
      
      for (int i = 0; i < map.length; i++){
        for (int j = 0; j < map[0].length; j++){
          pw.print(map[i][j]);
        }
        pw.println("");
      }
      pw.println("");
      
      pw.close();
      
      return 2;
    }
    //if one free space: find it and move
    else if(free == 1){
      if (map[row+1][col] == ' '){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        
        return 1 + solve(tempMap1, row+1, col);
      }
      else if (map[row-1][col] == ' '){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        
        return 1 + solve(tempMap1, row-1, col);
      }
      else if (map[row][col+1] == ' '){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        
        return 1 + solve(tempMap1, row, col+1);
      }
      else{
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        
        return 1 + solve(tempMap1, row, col-1);
      }
    }
    //if two free spaces: diverge paths then compare; return lower path
    else if (free == 2){
      if ((map[row+1][col] == ' ') && (map[row-1][col] == ' ')){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        char [][] tempMap2 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
            tempMap2[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        tempMap2[row][col] = '*';
        
        int path1 = 1 + solve(tempMap1, row+1, col);
        int path2 = 1 + solve(tempMap2, row-1, col);
        
        return Math.min(path1, path2);
      }
      else if ((map[row][col+1] == ' ') && (map[row+1][col] == ' ')){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        char [][] tempMap2 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
            tempMap2[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        tempMap2[row][col] = '*';
        
        int path1 = 1 + solve(tempMap1, row, col+1);
        int path2 = 1 + solve(tempMap2, row+1, col);
        
        return Math.min(path1, path2);
      }
      else if ((map[row][col+1] == ' ') && (map[row][col-1] == ' ')){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        char [][] tempMap2 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
            tempMap2[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        tempMap2[row][col] = '*';
        
        int path1 = 1 + solve(tempMap1, row, col+1);
        int path2 = 1 + solve(tempMap2, row, col-1);
        
        return Math.min(path1, path2);
      }
      else if ((map[row+1][col] == ' ') && (map[row][col-1] == ' ')){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        char [][] tempMap2 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
            tempMap2[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        tempMap2[row][col] = '*';
        
        int path1 = 1 + solve(tempMap1, row+1, col);
        int path2 = 1 + solve(tempMap2, row, col-1);
        
        return Math.min(path1, path2);
      }
      else if ((map[row][col-1] == ' ') && (map[row-1][col] == ' ')){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        char [][] tempMap2 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
            tempMap2[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        tempMap2[row][col] = '*';
        
        int path1 = 1 + solve(tempMap1, row-1, col);
        int path2 = 1 + solve(tempMap2, row, col-1);
        
        return Math.min(path1, path2);
      }
      else{
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        char [][] tempMap2 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
            tempMap2[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        tempMap2[row][col] = '*';
        
        int path1 = 1 + solve(tempMap1, row, col+1);
        int path2 = 1 + solve(tempMap2, row-1, col);
        
        return Math.min(path1, path2);
      }
    }
    //if three free spaces: diverge paths then compare; return lower path
    else if (free == 3){
      if ((map[row][col-1] == ' ') && (map[row][col+1] == ' ') && (map[row-1][col] == ' ')){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        char [][] tempMap2 = new char[map.length][map[0].length];
        char [][] tempMap3 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
            tempMap2[i][j] = map[i][j];
            tempMap3[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        tempMap2[row][col] = '*';
        tempMap3[row][col] = '*';
        
        int path1 = 1 + solve(tempMap1, row, col-1);
        int path2 = 1 + solve(tempMap2, row, col+1);
        int path3 = 1 + solve(tempMap3, row-1, col);
        
        return Math.min((Math.min(path1, path2)), path3);
      }
      else if ((map[row][col-1] == ' ') && (map[row][col+1] == ' ') && (map[row+1][col] == ' ')){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        char [][] tempMap2 = new char[map.length][map[0].length];
        char [][] tempMap3 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
            tempMap2[i][j] = map[i][j];
            tempMap3[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        tempMap2[row][col] = '*';
        tempMap3[row][col] = '*';
        
        int path1 = 1 + solve(tempMap1, row, col-1);
        int path2 = 1 + solve(tempMap2, row, col+1);
        int path3 = 1 + solve(tempMap3, row+1, col);
        
        return Math.min((Math.min(path1, path2)), path3);
      }
      else if ((map[row+1][col] == ' ') && (map[row][col+1] == ' ') && (map[row-1][col] == ' ')){
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        char [][] tempMap2 = new char[map.length][map[0].length];
        char [][] tempMap3 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
            tempMap2[i][j] = map[i][j];
            tempMap3[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        tempMap2[row][col] = '*';
        tempMap3[row][col] = '*';
        
        int path1 = 1 + solve(tempMap1, row+1, col);
        int path2 = 1 + solve(tempMap2, row, col+1);
        int path3 = 1 + solve(tempMap3, row-1, col);
        
        return Math.min((Math.min(path1, path2)), path3);
      }
      else{
        
        char [][] tempMap1 = new char[map.length][map[0].length];
        char [][] tempMap2 = new char[map.length][map[0].length];
        char [][] tempMap3 = new char[map.length][map[0].length];
        
        for (int i = 0; i < map.length; i++){
          for (int j = 0; j < map[0].length; j++){
            tempMap1[i][j] = map[i][j];
            tempMap2[i][j] = map[i][j];
            tempMap3[i][j] = map[i][j];
          }
        }
        
        tempMap1[row][col] = '*';
        tempMap2[row][col] = '*';
        tempMap3[row][col] = '*';
        
        int path1 = 1 + solve(tempMap1, row, col-1);
        int path2 = 1 + solve(tempMap2, row+1, col);
        int path3 = 1 + solve(tempMap3, row-1, col);
        
        return Math.min((Math.min(path1, path2)), path3);
      }
    }
    //if dead end
    else{
      return 1000000;
    }
  }
  
}